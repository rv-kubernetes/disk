controlplane $ k get all
NAME                         READY   STATUS    RESTARTS   AGE
pod/hr                       1/1     Running   0          53m
pod/simple-webapp-1          1/1     Running   0          52m
pod/simple-webapp-122        1/1     Running   0          52m
pod/test                     1/1     Running   0          53m
pod/webapp-c995bfc7b-x48vl   1/1     Running   0          20m

NAME                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
service/kubernetes       ClusterIP   10.96.0.1       <none>        443/TCP          54m
service/test-service     NodePort    10.103.33.200   <none>        80:30080/TCP     53m
service/web-service      ClusterIP   10.99.184.63    <none>        80/TCP           53m
service/webapp-service   NodePort    10.105.71.209   <none>        8080:30082/TCP   27m

NAME                     READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/webapp   1/1     1            1           27m

NAME                                DESIRED   CURRENT   READY   AGE
replicaset.apps/webapp-84ffb6ddff   0         0         0       27m
replicaset.apps/webapp-c995bfc7b    1         1         1       20m
controlplane $


controlplane $ k get all -n payroll
NAME        READY   STATUS    RESTARTS   AGE
pod/mysql   1/1     Running   0          27m
pod/web     1/1     Running   0          53m

NAME                  TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
service/mysql         ClusterIP   10.97.228.89    <none>        3306/TCP   27m
service/web-service   ClusterIP   10.103.212.40   <none>        80/TCP     53m
controlplane $

controlplane $ k get all -n hr
No resources found in hr namespace.
controlplane $



controlplane $ k get pod hr -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2020-12-29T20:21:26Z"
  labels:
    name: hr
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:name: {}
      f:spec:
        f:containers:
          k:{"name":"web"}:
            .: {}
            f:args: {}
            f:command: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:hostname: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
    manager: kubectl-create
    operation: Update
    time: "2020-12-29T20:21:26Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.244.1.4"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kubelet
    operation: Update
    time: "2020-12-29T20:21:52Z"
  name: hr
  namespace: default
  resourceVersion: "787"
  selfLink: /api/v1/namespaces/default/pods/hr
  uid: 49fc382c-f3cb-4c1d-acc1-c67e9c2a1b64
spec:
  containers:
  - args:
    - -c
    - while true; do echo -e "HTTP/1.1 200 OK\n\n This is the HR server!" | nc -l
      -p 80 -q 1; done
    command:
    - /bin/sh
    image: nicolaka/netshoot
    imagePullPolicy: Always
    name: web
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-lh92s
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  hostname: hr-host1
  nodeName: node01
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: default-token-lh92s
    secret:
      defaultMode: 420
      secretName: default-token-lh92s
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:21:26Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:21:52Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:21:52Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:21:26Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://a19d7278bf8434181ab1b7ba82d5e0400e531aafed110c495a2239b109fac853
    image: nicolaka/netshoot:latest
    imageID: docker-pullable://nicolaka/netshoot@sha256:52dcf922fc8d419c23f677f07cb0f2467f2157b92448f35bda15f471026ad476
    lastState: {}
    name: web
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-12-29T20:21:52Z"
  hostIP: 172.17.0.39
  phase: Running
  podIP: 10.244.1.4
  podIPs:
  - ip: 10.244.1.4
  qosClass: BestEffort
  startTime: "2020-12-29T20:21:26Z"
controlplane $



controlplane $ k get pod test -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2020-12-29T20:21:26Z"
  labels:
    name: test
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:name: {}
      f:spec:
        f:containers:
          k:{"name":"test"}:
            .: {}
            f:env:
              .: {}
              k:{"name":"APP_NAME"}:
                .: {}
                f:name: {}
                f:value: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":8080,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:protocol: {}
            f:resources: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:hostname: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
    manager: kubectl-create
    operation: Update
    time: "2020-12-29T20:21:26Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
        f:phase: {}
        f:podIP: {}
      f:podIPs:
          .: {}
          k:{"ip":"10.244.1.5"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kubelet
    operation: Update
    time: "2020-12-29T20:22:09Z"
  name: test
  namespace: default
  resourceVersion: "844"
  selfLink: /api/v1/namespaces/default/pods/test
  uid: dae64ab0-38a7-43c5-be71-1533a83716b3
spec:
  containers:
  - env:
    - name: APP_NAME
      value: Test Application
    image: kodekloud/webapp-conntest:web
    imagePullPolicy: Always
    name: test
    ports:
    - containerPort: 8080
      protocol: TCP
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-lh92s
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  hostname: test-host1
  nodeName: node01
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: default-token-lh92s
    secret:
      defaultMode: 420
      secretName: default-token-lh92s
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:21:27Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:22:09Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:22:09Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:21:26Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://e42581cdf406ce3c31e29fe6a66e346bcc098714daf376df642a59d6895a9427
    image: kodekloud/webapp-conntest:web
    imageID: docker-pullable://kodekloud/webapp-conntest@sha256:9deb1325274bcdf0256629133c693ed9fb4899cff147c9169f905d7b273d0a99
    lastState: {}
    name: test
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-12-29T20:22:09Z"
  hostIP: 172.17.0.39
  phase: Running
  podIP: 10.244.1.5
  podIPs:
  - ip: 10.244.1.5
  qosClass: BestEffort
  startTime: "2020-12-29T20:21:27Z"
controlplane $






controlplane $ k get svc web-service -o yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2020-12-29T20:21:26Z"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:ports:
          .: {}
          k:{"port":80,"protocol":"TCP"}:
            .: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
        f:selector:
          .: {}
          f:name: {}
        f:sessionAffinity: {}
        f:type: {}
    manager: kubectl-create
    operation: Update
    time: "2020-12-29T20:21:26Z"
  name: web-service
  namespace: default
  resourceVersion: "707"
  selfLink: /api/v1/namespaces/default/services/web-service
  uid: 2ddc2023-4af3-4f24-91fd-9a822fa2979a
spec:
  clusterIP: 10.99.184.63
  ports:
  - port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: hr
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
controlplane $



controlplane $ k get deployment.apps/webapp -o yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
  creationTimestamp: "2020-12-29T20:47:07Z"
  generation: 2
  labels:
    name: webapp
  managedFields:
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:name: {}
      f:spec:
        f:progressDeadlineSeconds: {}
        f:replicas: {}
        f:revisionHistoryLimit: {}
        f:selector:
          f:matchLabels:
            .: {}
            f:name: {}
        f:strategy:
          f:rollingUpdate:
            .: {}
            f:maxSurge: {}
            f:maxUnavailable: {}
          f:type: {}
        f:template:
          f:metadata:
            f:labels:
              .: {}
              f:name: {}
          f:spec:
            f:containers:
              k:{"name":"simple-webapp-mysql"}:
                .: {}
                f:env:
                  .: {}
                  k:{"name":"DB_Host"}:
                    .: {}
                    f:name: {}
                  k:{"name":"DB_Password"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                  k:{"name":"DB_User"}:
                    .: {}
                    f:name: {}
                    f:value: {}
                f:image: {}
                f:imagePullPolicy: {}
                f:name: {}
                f:ports:
                  .: {}
                  k:{"containerPort":8080,"protocol":"TCP"}:
                    .: {}
                    f:containerPort: {}
                    f:protocol: {}
                f:resources: {}
                f:terminationMessagePath: {}
                f:terminationMessagePolicy: {}
            f:dnsPolicy: {}
            f:restartPolicy: {}
            f:schedulerName: {}
            f:securityContext: {}
            f:terminationGracePeriodSeconds: {}
    manager: python-requests
    operation: Update
    time: "2020-12-29T20:47:07Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:template:
          f:spec:
            f:containers:
              k:{"name":"simple-webapp-mysql"}:
                f:env:
                  k:{"name":"DB_Host"}:
                    f:value: {}
    manager: kubectl-edit
    operation: Update
    time: "2020-12-29T20:53:44Z"
  - apiVersion: apps/v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:deployment.kubernetes.io/revision: {}
      f:status:
        f:availableReplicas: {}
        f:conditions:
          .: {}
          k:{"type":"Available"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"Progressing"}:
            .: {}
            f:lastTransitionTime: {}
            f:lastUpdateTime: {}
            f:message: {}
            f:reason: {}
            f:status: {}
            f:type: {}
        f:observedGeneration: {}
        f:readyReplicas: {}
        f:replicas: {}
        f:updatedReplicas: {}
    manager: kube-controller-manager
    operation: Update
    time: "2020-12-29T20:53:48Z"
  name: webapp
  namespace: default
  resourceVersion: "5221"
  selfLink: /apis/apps/v1/namespaces/default/deployments/webapp
  uid: 94f18de1-dfe5-4be0-ac5c-b7a74a3753f4
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: webapp
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: webapp
    spec:
      containers:
      - env:
        - name: DB_Host
          value: mysql.payroll
        - name: DB_User
          value: root
        - name: DB_Password
          value: paswrd
        image: mmumshad/simple-webapp-mysql
        imagePullPolicy: Always
        name: simple-webapp-mysql
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2020-12-29T20:47:16Z"
    lastUpdateTime: "2020-12-29T20:47:16Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2020-12-29T20:47:07Z"
    lastUpdateTime: "2020-12-29T20:53:48Z"
    message: ReplicaSet "webapp-c995bfc7b" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 2
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1
controlplane $



controlplane $ k get service/webapp-service -o yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2020-12-29T20:47:08Z"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:externalTrafficPolicy: {}
        f:ports:
          .: {}
          k:{"port":8080,"protocol":"TCP"}:
            .: {}
            f:nodePort: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
        f:selector:
          .: {}
          f:name: {}
        f:sessionAffinity: {}
        f:type: {}
    manager: python-requests
    operation: Update
    time: "2020-12-29T20:47:07Z"
  name: webapp-service
  namespace: default
  resourceVersion: "4247"
  selfLink: /api/v1/namespaces/default/services/webapp-service
  uid: f9bbfefd-29fc-4118-b244-bc5ccaf12be8
spec:
  clusterIP: 10.105.71.209
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 30082
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    name: webapp
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
controlplane $






controlplane $ k get service/test-service -o yaml
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2020-12-29T20:21:27Z"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:spec:
        f:externalTrafficPolicy: {}
        f:ports:
          .: {}
          k:{"port":80,"protocol":"TCP"}:
            .: {}
            f:nodePort: {}
            f:port: {}
            f:protocol: {}
            f:targetPort: {}
        f:selector:
          .: {}
          f:name: {}
        f:sessionAffinity: {}
        f:type: {}
    manager: kubectl-create
    operation: Update
    time: "2020-12-29T20:21:26Z"
  name: test-service
  namespace: default
  resourceVersion: "716"
  selfLink: /api/v1/namespaces/default/services/test-service
  uid: 1cf7b49f-e44e-4eb6-8ad9-b776b0c87179
spec:
  clusterIP: 10.103.33.200
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 30080
    port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    name: test
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
controlplane $




controlplane $ k get pod web -n payroll -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2020-12-29T20:21:25Z"
  labels:
    name: web
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:name: {}
      f:spec:
        f:containers:
          k:{"name":"web"}:
            .: {}
            f:args: {}
            f:command: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:hostname: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
    manager: kubectl-create
    operation: Update
    time: "2020-12-29T20:21:25Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
         k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.244.1.3"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kubelet
    operation: Update
    time: "2020-12-29T20:21:53Z"
  name: web
  namespace: payroll
  resourceVersion: "791"
  selfLink: /api/v1/namespaces/payroll/pods/web
  uid: cdbcedf2-c5f9-48a2-854d-f1fbc31cb374
spec:
  containers:
  - args:
    - -c
    - while true; do echo -e "HTTP/1.1 200 OK\n\n This is the PayRoll server!" | nc
      -l -p 80 -q 1; done
    command:
    - /bin/sh
    image: nicolaka/netshoot
    imagePullPolicy: Always
    name: web
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-79b28
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  hostname: web-host1
  nodeName: node01
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: default-token-79b28
    secret:
      defaultMode: 420
      secretName: default-token-79b28
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:21:26Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:21:53Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:21:53Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:21:26Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://39daaf9a4be57bb26534d42707a675c5adef1298fe586255920785e9500b1bb5
    image: nicolaka/netshoot:latest
    imageID: docker-pullable://nicolaka/netshoot@sha256:52dcf922fc8d419c23f677f07cb0f2467f2157b92448f35bda15f471026ad476
    lastState: {}
    name: web
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-12-29T20:21:52Z"
  hostIP: 172.17.0.39
  phase: Running
  podIP: 10.244.1.3
  podIPs:
  - ip: 10.244.1.3
  qosClass: BestEffort
  startTime: "2020-12-29T20:21:26Z"
controlplane $    



controlplane $ k get pod mysql -n payroll -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2020-12-29T20:47:08Z"
  labels:
    name: mysql
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:name: {}
      f:spec:
        f:containers:
          k:{"name":"mysql"}:
            .: {}
            f:env:
              .: {}
              k:{"name":"MYSQL_ROOT_PASSWORD"}:
                .: {}
                f:name: {}
                f:value: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":3306,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:protocol: {}
            f:resources: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
    manager: python-requests
    operation: Update
    time: "2020-12-29T20:47:08Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
           f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.244.1.9"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kubelet
    operation: Update
    time: "2020-12-29T20:47:10Z"
  name: mysql
  namespace: payroll
  resourceVersion: "4267"
  selfLink: /api/v1/namespaces/payroll/pods/mysql
  uid: 374c2618-6df9-4637-bebc-a7a48b05034f
spec:
  containers:
  - env:
    - name: MYSQL_ROOT_PASSWORD
      value: paswrd
    image: mysql:5.6
    imagePullPolicy: IfNotPresent
    name: mysql
    ports:
    - containerPort: 3306
      protocol: TCP
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-79b28
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: node01
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: default-token-79b28
    secret:
      defaultMode: 420
      secretName: default-token-79b28
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:47:08Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:47:10Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:47:10Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:47:08Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://04a9c436dc8e24730833007558b6848f2920812348887fdfccf22f921fffa457
    image: mysql:5.6
    imageID: docker-pullable://mysql@sha256:8875725ff152f77e47a563661ea010b4ca9cea42d9dda897fb565ca224e83de2
    lastState: {}
    name: mysql
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-12-29T20:47:09Z"
  hostIP: 172.17.0.39
  phase: Running
  podIP: 10.244.1.9
  podIPs:
  - ip: 10.244.1.9
  qosClass: BestEffort
  startTime: "2020-12-29T20:47:08Z"
controlplane $



    secret:
      defaultMode: 420
      secretName: default-token-79b28
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:47:08Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:47:10Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:47:10Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:47:08Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://04a9c436dc8e24730833007558b6848f2920812348887fdfccf22f921fffa457
    image: mysql:5.6
    imageID: docker-pullable://mysql@sha256:8875725ff152f77e47a563661ea010b4ca9cea42d9dda897fb565ca224e83de2
    lastState: {}
    name: mysql
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-12-29T20:47:09Z"
  hostIP: 172.17.0.39
  phase: Running
  podIP: 10.244.1.9
  podIPs:
  - ip: 10.244.1.9
  qosClass: BestEffort
  startTime: "2020-12-29T20:47:08Z"
controlplane $





# neeeeeeeeeeeeeeededdddddddddddd??????????????????
controlplane $ k get pod/simple-webapp-1 -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2020-12-29T20:22:01Z"
  labels:
    name: simple-webapp
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:name: {}
      f:spec:
        f:containers:
          k:{"name":"simple-webapp"}:
            .: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":8080,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:protocol: {}
            f:resources: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
    manager: python-requests
    operation: Update
    time: "2020-12-29T20:22:01Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
       f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.244.1.6"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kubelet
    operation: Update
    time: "2020-12-29T20:22:17Z"
  name: simple-webapp-1
  namespace: default
  resourceVersion: "869"
  selfLink: /api/v1/namespaces/default/pods/simple-webapp-1
  uid: 61f8f9ea-4c05-439d-babd-63e755c3513c
spec:
  containers:
  - image: kodekloud/webapp-delayed-start
    imagePullPolicy: Always
    name: simple-webapp
    ports:
    - containerPort: 8080
      protocol: TCP
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-lh92s
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: node01
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: default-token-lh92s
    secret:
      defaultMode: 420
      secretName: default-token-lh92s
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:22:02Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:22:17Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:22:17Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:22:01Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://c9d4a3b3e4d31003759319a2b5aecb4964ed51de5df3a9a37a94240e48d68082
    image: kodekloud/webapp-delayed-start:latest
    imageID: docker-pullable://kodekloud/webapp-delayed-start@sha256:666b95c2ef8e00a74fa0ea96def8d9d69104ec5d9b9b0f49d8a76bd4c94ad343
    lastState: {}
    name: simple-webapp
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-12-29T20:22:16Z"
  hostIP: 172.17.0.39
  phase: Running
  podIP: 10.244.1.6
  podIPs:
  - ip: 10.244.1.6
  qosClass: BestEffort
  startTime: "2020-12-29T20:22:02Z"
controlplane $



controlplane $ k get pod/simple-webapp-122 -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2020-12-29T20:22:01Z"
  labels:
    name: simple-webapp
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .: {}
          f:name: {}
      f:spec:
        f:containers:
          k:{"name":"simple-webapp"}:
            .: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":8080,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:protocol: {}
            f:resources: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
    manager: python-requests
    operation: Update
    time: "2020-12-29T20:22:01Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
        f:phase: {}
        f:podIP: {}
       f:podIPs:
          .: {}
          k:{"ip":"10.244.1.7"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kubelet
    operation: Update
    time: "2020-12-29T20:22:17Z"
  name: simple-webapp-122
  namespace: default
  resourceVersion: "868"
  selfLink: /api/v1/namespaces/default/pods/simple-webapp-122
  uid: 0057f547-afb9-449e-ab35-5013c02ad164
spec:
  containers:
  - image: kodekloud/webapp-delayed-start
    imagePullPolicy: Always
    name: simple-webapp
    ports:
    - containerPort: 8080
      protocol: TCP
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-lh92s
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: node01
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: default-token-lh92s
    secret:
      defaultMode: 420
      secretName: default-token-lh92s
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:22:02Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:22:17Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:22:17Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2020-12-29T20:22:01Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://521299123bed5e12bd6584000eff88b5daf61d7246526d2b883b8559dbf92707
    image: kodekloud/webapp-delayed-start:latest
    imageID: docker-pullable://kodekloud/webapp-delayed-start@sha256:666b95c2ef8e00a74fa0ea96def8d9d69104ec5d9b9b0f49d8a76bd4c94ad343
    lastState: {}
    name: simple-webapp
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-12-29T20:22:16Z"
  hostIP: 172.17.0.39
  phase: Running
  podIP: 10.244.1.7
  podIPs:
  - ip: 10.244.1.7
  qosClass: BestEffort
  startTime: "2020-12-29T20:22:02Z"
controlplane $
      
