controlplane $ cat clusterip.yaml
apiVersion: v1
kind: Service
metadata:
  name: webapp1-clusterip-svc
  labels:
    app: webapp1-clusterip
spec:
  ports:
  - port: 80
  selector:
    app: webapp1-clusterip
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: webapp1-clusterip-deployment
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: webapp1-clusterip
    spec:
      containers:
      - name: webapp1-clusterip-pod
        image: katacoda/docker-http-server:latest
        ports:
        - containerPort: 80
---
controlplane $


controlplane $ cat clusterip-target.yaml
apiVersion: v1
kind: Service
metadata:  name: webapp1-clusterip-targetport-svc
  labels:
    app: webapp1-clusterip-targetport
spec:  
  ports:
  - port: 8080
    targetPort: 80
  selector:    
    app: webapp1-clusterip-targetport
---
apiVersion: extensions/v1beta1
kind: Deploymentmetadata:
  name: webapp1-clusterip-targetport-deployment
spec:
  replicas: 2  template:
    metadata:
      labels:
        app: webapp1-clusterip-targetport
    spec:
      containers:
      - name: webapp1-clusterip-targetport-pod
        image: katacoda/docker-http-server:latest        
        ports:        
        - containerPort: 80
---
controlplane $


controlplane $ cat nodeport.yaml
apiVersion: v1
kind: Service
metadata:  
  name: webapp1-nodeport-svc
  labels:
    app: webapp1-nodeport
spec:  
  type: NodePort
  ports:
  - port: 80
    nodePort: 30080  selector:
    app: webapp1-nodeport
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: webapp1-nodeport-deployment
spec:  
  replicas: 2
  template:
    metadata:
      labels:
        app: webapp1-nodeport
    spec:
      containers:
      - name: webapp1-nodeport-pod        
	    image: katacoda/docker-http-server:latest        
		ports:
        - containerPort: 80
---
controlplane $


controlplane $ cat externalip.yaml
apiVersion: v1
kind: Service
  metadata:
  name: webapp1-externalip-svc
  labels:
    app: webapp1-externalip
spec:
  ports:
  - port: 80
  externalIPs:  
  - 172.17.0.37
  selector:
    app: webapp1-externalip
---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: webapp1-externalip-deployment
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: webapp1-externalip
    spec:
      containers:      
	  - name: webapp1-externalip-pod        
	    image: katacoda/docker-http-server:latest
        ports:
        - containerPort: 80
---
controlplane $


controlplane $ k get svc
NAME                               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
kubernetes                         ClusterIP   10.96.0.1        <none>        443/TCP        30m
webapp1-clusterip-svc              ClusterIP   10.106.78.126    <none>        80/TCP         27m
webapp1-clusterip-targetport-svc   ClusterIP   10.101.217.213   <none>        8080/TCP       18m
webapp1-externalip-svc             ClusterIP   10.103.122.133   172.17.0.37   80/TCP         2m21s
webapp1-nodeport-svc               NodePort    10.101.24.235    <none>        80:30080/TCP   13m
controlplane $ curl 10.106.78.126
<h1>This request was processed by host: webapp1-clusterip-deployment-669c7c65c4-5d4pr</h1>
controlplane $ curl 10.103.122.133
<h1>This request was processed by host: webapp1-externalip-deployment-6446b488f8-b747g</h1>
controlplane $ curl 10.101.24.235
<h1>This request was processed by host: webapp1-nodeport-deployment-677bd89b96-994nh</h1>
controlplane $ curl 10.101.24.235:30080
^C
controlplane $ curl 172.17.0.37:30080
<h1>This request was processed by host: webapp1-nodeport-deployment-677bd89b96-994nh</h1>
controlplane $ curl 172.17.0.37
<h1>This request was processed by host: webapp1-externalip-deployment-6446b488f8-b747g</h1>
controlplane $




ontrolplane $ cat cloudprovider.yaml
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: kube-keepalived-vip
  namespace: kube-system
spec:
  template:
    metadata:
      labels:
        name: kube-keepalived-vip
    spec:
      hostNetwork: true
      containers:
        - image: gcr.io/google_containers/kube-keepalived-vip:0.9
          name: kube-keepalived-vip
          imagePullPolicy: Always
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /lib/modules
              name: modules
              readOnly: true
            - mountPath: /dev
              name: dev
          # use downward API
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          # to use unicast
          args:
          - --services-configmap=kube-system/vip-configmap
          # unicast uses the ip of the nodes instead of multicast
          # this is useful if running in cloud providers (like AWS)
          #- --use-unicast=true
      volumes:
        - name: modules
          hostPath:
            path: /lib/modules
        - name: dev
          hostPath:
            path: /dev
      nodeSelector:
        # type: worker # adjust this to match your worker nodes
---
## We also create an empty ConfigMap to hold our config
apiVersion: v1
kind: ConfigMap
metadata:
  name: vip-configmap
  namespace: kube-system
data:
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app: keepalived-cloud-provider
  name: keepalived-cloud-provider
  namespace: kube-system
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: keepalived-cloud-provider
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
      labels:
        app: keepalived-cloud-provider
    spec:
      containers:
      - name: keepalived-cloud-provider
        image: quay.io/munnerz/keepalived-cloud-provider:0.0.1
        imagePullPolicy: IfNotPresent
        env:
        - name: KEEPALIVED_NAMESPACE
          value: kube-system
        - name: KEEPALIVED_CONFIG_MAP
          value: vip-configmap
        - name: KEEPALIVED_SERVICE_CIDR
          value: 10.10.0.0/26 # pick a CIDR that is explicitly reserved for keepalived
        volumeMounts:
        - name: certs
          mountPath: /etc/ssl/certs
        resources:
          requests:
            cpu: 200m
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10252
            host: 127.0.0.1
          initialDelaySeconds: 15
          timeoutSeconds: 15
          failureThreshold: 8
      volumes:
      - name: certs
        hostPath:
          path: /etc/ssl/certs
controlplane $

controlplane $ cat loadbalancer.yaml
apiVersion: v1
kind: Service
metadata:
  name: webapp1-loadbalancer-svc
  labels:
    app: webapp1-loadbalancer
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: webapp1-loadbalancer
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: webapp1-loadbalancer-deployment
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: webapp1-loadbalancer
    spec:
      containers:
      - name: webapp1-loadbalancer-pod
        image: katacoda/docker-http-server:latest
        ports:
        - containerPort: 80
---
controlplane $


controlplane $ kubectl get svc
NAME                               TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
kubernetes                         ClusterIP      10.96.0.1        <none>        443/TCP        37m
webapp1-clusterip-svc              ClusterIP      10.106.78.126    <none>        80/TCP         34m
webapp1-clusterip-targetport-svc   ClusterIP      10.101.217.213   <none>        8080/TCP       25m
webapp1-externalip-svc             ClusterIP      10.103.122.133   172.17.0.37   80/TCP         9m41s
webapp1-loadbalancer-svc           LoadBalancer   10.107.47.7      172.17.0.37   80:32373/TCP   14s
webapp1-nodeport-svc               NodePort       10.101.24.235    <none>        80:30080/TCP   20m
controlplane $

controlplane $ kubectl describe svc/webapp1-loadbalancer-svc
Name:                     webapp1-loadbalancer-svc
Namespace:                default
Labels:                   app=webapp1-loadbalancer
Annotations:              kubectl.kubernetes.io/last-applied-configuration:
                            {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"webapp1-loadbalancer"},"name":"webapp1-loadbalancer-svc"...
Selector:                 app=webapp1-loadbalancer
Type:                     LoadBalancer
IP:                       10.107.47.7
LoadBalancer Ingress:     172.17.0.37
Port:                     <unset>  80/TCP
TargetPort:               80/TCP
NodePort:                 <unset>  32373/TCP
Endpoints:                10.32.0.14:80,10.32.0.15:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:
  Type    Reason                Age   From                Message
  ----    ------                ----  ----                -------
  Normal  CreatingLoadBalancer  40s   service-controller  Creating load balancer
  Normal  CreatedLoadBalancer   40s   service-controller  Created load balancer
controlplane $

controlplane $ export LoadBalancerIP=$(kubectl get services/webapp1-loadbalancer-svc -o go-template='{{(index .status.loadBalancer.ingress 0).ip}}')
controlplane $ echo LoadBalancerIP=$LoadBalancerIP
LoadBalancerIP=172.17.0.37
controlplane $ curl $LoadBalancerIP
<h1>This request was processed by host: webapp1-loadbalancer-deployment-f45b8d9cd-c7ct4</h1>
controlplane $

controlplane $ curl $LoadBalancerIP
<h1>This request was processed by host: webapp1-externalip-deployment-6446b488f8-j7ngs</h1>
controlplane $ curl $LoadBalancerIP
<h1>This request was processed by host: webapp1-externalip-deployment-6446b488f8-b747g</h1>
controlplane $
# it balance


